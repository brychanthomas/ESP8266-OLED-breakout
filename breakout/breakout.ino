#include <Wire.h>
#include "SSD1306Wire.h"

#include "Paddle.h"
#include "Bricks.h"

#define pushToPlayWidth 22
#define pushToPlayHeight 49

const uint8_t pushToPlayXBM[] PROGMEM = {
  0xFF, 0x01, 0x00, 0xFF, 0x01, 0x00, 0x83, 0x01, 0x00, 0x83, 0x01, 0x00,
  0xFF, 0x01, 0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x03, 0xE0, 0x01, 0xFF, 0xE1, 0x01, 0xFF, 0x01, 0x3E,
  0x03, 0x00, 0x3E, 0x03, 0xE0, 0x01, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xFF, 0x01, 0x3F, 0xFF, 0x81, 0x0F,
  0x30, 0xE0, 0x0C, 0x30, 0xE0, 0x0C, 0xFF, 0x81, 0x0F, 0xFF, 0x01, 0x3F,
  0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xF3, 0x01, 0x00, 0xB3, 0x01, 0x30,
  0xB3, 0x01, 0x30, 0xB3, 0x01, 0x30, 0xBF, 0xE1, 0x3F, 0xBF, 0xE1, 0x3F,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xE1, 0x07, 0xFF, 0xE1, 0x07,
  0x80, 0x61, 0x06, 0x80, 0x61, 0x06, 0x80, 0xE1, 0x3F, 0xFF, 0xE1, 0x3F,
  0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00,
  0x3F, 0x00, 0x00, 0x33, 0x00, 0x00, 0x33, 0x00, 0x00, 0xFF, 0x01, 0x00,
  0xFF, 0x01, 0x00
};

#define winnerWidth 8
#define winnerHeight 59
const uint8_t winnerXBM[] PROGMEM = {
  0xCF, 0xCF, 0x00, 0x00, 0xDE, 0xDE, 0x73, 0x33, 0xFF, 0xFF, 0x00, 0x00,
  0xDB, 0xDB, 0xDB, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x60, 0x30, 0x18,
  0x0C, 0x06, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x60, 0x30, 0x18, 0x0C,
  0x06, 0xFF, 0xFF, 0x00, 0x00, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0x00,
  0x00, 0xFF, 0xFF, 0xC0, 0x60, 0x30, 0x30, 0x60, 0xC0, 0xFF, 0xFF
};

SSD1306Wire display(0x3c, 5, 4);  // ADDRESS, SDA, SCL

void setup() {
  Serial.begin(115200);
  display.init();
  display.setColor(WHITE);
  pinMode(RIGHTBTN, INPUT_PULLUP);
  pinMode(LEFTBTN, INPUT_PULLUP);
  pinMode(UPBTN, INPUT_PULLUP);
  pinMode(PUSHBTN, INPUT_PULLUP);

  showStartScreen();
}

Ball ball(80, 32, 70.0/FPS, 70.0/FPS, 3, &display);
Paddle paddle(120, 20, &display);
Bricks bricks(&display);

void loop() {
  display.clear();

  paddle.update();
  ball.update(paddle.getX(), paddle.getY(), paddle.getWidth());
  bricks.update(&ball);

  ball.draw();
  paddle.draw();
  bricks.draw();
  display.display();

  delay(1000/FPS);

  if (ball.getX() > paddle.getX()) {
    display.drawXbm(75, 8, pushToPlayWidth, pushToPlayHeight, pushToPlayXBM);
    display.invertDisplay();
    display.display();
    while(digitalRead(PUSHBTN) == HIGH) {delay(50);}
    display.normalDisplay();
    ball.setPosition(80, 32);
  }

  if (bricks.getScore() == 32) { //if all bricks destroyed
    display.clear();
    display.drawXbm(60, 3, winnerWidth, winnerHeight, winnerXBM);
    display.invertDisplay();
    display.display();
    while(1) { delay(10000); }
    //resetGame();
  }

}

void showStartScreen() {
  display.drawXbm(60, 8, pushToPlayWidth, pushToPlayHeight, pushToPlayXBM);
  display.invertDisplay();
  display.display();
  while(digitalRead(PUSHBTN) == HIGH) {delay(50);}
  display.normalDisplay();
}
